#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include "../zmk-nodefree-config/helper.h"


/* use helper macros to define left and right hand keys */
#include "../../../../zmk-nodefree-config/keypos_def/keypos_36keys.h"       // keyposition helpers
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // left-hand keys
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // right-hand keys
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      // thumb keys

/* left-hand HRMs */
ZMK_BEHAVIOR(hml, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;                // repeat on tap-into-hold
    global-quick-tap-ms = <150>;         // requires PR #1387
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_R THUMBS>;
    hold-trigger-on-release;             // delay positional check until key-release
)

/* right-hand HRMs */
ZMK_BEHAVIOR(hmr, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;                // repeat on tap-into-hold
    global-quick-tap-ms = <150>;         // requires PR #1387
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_L THUMBS>;
    hold-trigger-on-release;             // delay positional check until key-release
)

&mt {
  quick-tap-ms = <200>;
};

/ {
  conditional_layers {
    compatible = "zmk,conditional-layers";
    tri_layer {
      if-layers = <1 2>;
      then-layer = <3>;
    };
  };
  keymap {
    compatible = "zmk,keymap";
    default_layer {
      bindings = <
        &kp Q       &kp W       &kp E        &kp R        &kp T   &kp Y     &kp U        &kp I        &kp O       &kp P
        &hml LGUI A &hml LALT S &hml LCTRL D &hml LSHFT F &kp G   &kp H     &hmr RSHFT J &hmr LCTRL K &hmr LALT L &hmr LGUI SEMI
        &kp Z       &kp X       &kp C        &kp V        &kp B   &kp N     &kp M        &kp COMMA    &kp DOT     &kp FSLH
                                &trans       &lt 2 BSPC   &kp ESC &kp ENTER &lt 1 SPACE  &trans
      >;
    };

    num_layer {
      bindings = <
        &kp F1       &kp F2       &kp F3        &kp F4        &kp F5    &kp F6    &kp F7        &kp F8        &kp F9       &kp F10
        &hml LGUI N1 &hml LALT N2 &hml LCTRL N3 &hml LSHFT N4 &kp N5    &kp N6    &hmr RSHFT N7 &hmr LCTRL N8 &hmr LALT N9 &hmr LGUI N0
        &kp EXCL     &kp AT       &kp HASH      &kp DLLR      &kp PRCNT &kp CARET &kp AMPS      &kp STAR      &kp LPAR     &kp RPAR
                                  &trans        &trans        &trans    &trans    &trans        &trans
      >;
    };

    arw_layer {
      bindings = <
        &kp TAB               &kp INS       &kp LBRC        &kp RBRC        &kp LS(NON_US_HASH) &kp HOME  &kp PG_DN       &kp PG_UP     &kp END         &kp PSCRN
        &kp LGUI              &hml LALT DEL &hml LCTRL LBKT &hml LSHFT RBKT &kp NON_US_HASH     &kp LEFT  &hmr RSHFT DOWN &hmr LCTRL UP &hmr LALT RIGHT &hmr LGUI SQT
        &mt LSHFT NON_US_BSLH &kp GRAVE     &kp LPAR        &kp RPAR        &kp PIPE2           &kp MINUS &kp UNDER       &kp EQUAL     &kp PLUS        &kp NON_US_HASH
                                            &trans          &trans          &trans              &trans    &trans          &trans
      >;
    };

    ctl_layer {
      bindings = <
        &kp F11      &kp F12          &kp K_MUTE        &kp K_PP            &kp K_VOL_UP &kp C_BRI_UP &none              &none              &none        &bt BT_CLR
        &hml LGUI N1 &hml LALT K_PREV &hml LCTRL K_NEXT &hml LSHFT K_VOL_DN &kp C_BRI_DN &kp N6       &hmr RSHFT OUT_BLE &hmr LCTRL OUT_USB &kp LALT     &kp LGUI
        &kp LCTRL    &none            &kp K_PREV        &kp K_NEXT          &kp K_VOL_DN &kp C_BRI_DN &out OUT_BLE       &out OUT_USB       &none        &none
        &kp LSHFT    &none            &kp LPAR          &kp RPAR            &kp PIPE2    &bt BT_SEL 1 &bt BT_SEL 2       &bt BT_SEL 3       &bt BT_SEL 4 &bt BT_SEL 5
                                      &trans            &trans              &trans       &trans       &trans             &trans
      >;
    };
  };
};
